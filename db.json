{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"933847c5997c007552d2717bb85e4bf3bc5d85da","modified":1498719645222},{"_id":"source/_posts/Play-with-Bitwise-Operations.md","hash":"777bd5171f4f0efe9d0b32a0522eb56663a81e46","modified":1498719784196},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1498698096844},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1498698096844},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1498698096844},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1498698096844},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1498698096844},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1498698096844},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1498698096844},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1498698096844},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1498698096844},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1498698096844},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1498698096844},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1498698096844},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1498698096844},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1498698096844},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1498698096844},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1498698096844},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1498698096844},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1498698096844},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1498698096844},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1498698096844},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1498698096844},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1498698096844},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1498698096844},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1498698096844},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1498698096844},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1498698096844},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1498698096844},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1498698096844},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1498698096844},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1498698096844},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1498698096844},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1498698096844},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1498698096844},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1498698096844},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1498698096844},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1498698096844},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1498698096844},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1498698096844},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1498698096848},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1498698096848},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1498698096848},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1498698096848},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1498698096848},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1498698096848},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1498698096848},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1498698096848},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1498698096848},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1498698096848},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1498698096848},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1498698096844},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1498698096844},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1498698096844},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1498698096844},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1498698096844},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1498698096844},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1498698096844},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1498698096844},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1498698096844},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1498698096844},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1498698096844},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1498698096844},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1498698096844},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1498698096844},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1498698096844},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1498698096844},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1498698096844},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1498698096844},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1498698096844},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1498698096844},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1498698096848},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1498698096848},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1498698096848},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1498698096848},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1498698096848},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1498698096848},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1498698096848},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1498698096844},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1498698096844},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1498698096848},{"_id":"public/archives/index.html","hash":"4b647beb5ac510fdda2ae78fff8f994cea5f3be0","modified":1498719836197},{"_id":"public/index.html","hash":"24fa6e6df9436e793e6e6b0508114740f9e08588","modified":1498719836238},{"_id":"public/2017/06/29/Play-with-Bitwise-Operations/index.html","hash":"cca4542f62f02ecec8617c87d54c7818631d7a3f","modified":1498719836243},{"_id":"public/2017/06/29/hello-world/index.html","hash":"9ad4869f67ad90dc598841c95c53f223b47e299f","modified":1498719836243},{"_id":"public/archives/2017/index.html","hash":"8732e64b83eae3ba80b69c8aeb42305a4fd5105c","modified":1498719836243},{"_id":"public/archives/2017/06/index.html","hash":"67779b8a0b540cb5a21dfa0db9e648f2166b0224","modified":1498719836244},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1498719836252},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1498719836252},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1498719836252},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1498719836252},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1498719836252},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1498719836252},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1498719836252},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1498719836252},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1498719836252},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1498719836252},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1498719837570},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1498719837581},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1498719837581},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1498719837581},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1498719837581},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1498719837581},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1498719837582},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1498719837582},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1498719837586},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1498719837586},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1498719837586},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1498719837593},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1498719837593}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-06-29T07:00:45.222Z","updated":"2017-06-29T07:00:45.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i33ec100009rrcm1asl3e6","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"Play with Bitwise Operations","date":"2017-06-29T07:03:04.000Z","_content":"\n\nI want to write a quick summary (with examples) of some bitwise operations I have learnt from another article [(Reference here)](https://www.hackerearth.com/practice/notes/fun-with-bits-print-all-subsets-of-a-set/). I have included some common use of these bitwise operations and put together some examples to illustrate these ideas. Finally, I have presented an application of some of the bitwise operations here. This post is mostly for my own record of studying. I hope you will enjoy the contents here too! Have fun and keep coding!\n\n<!-- more -->\n## Bitwise Logic\n***\n|  x   |  y  |  AND  |  OR  |  XOR |\n| --------   | :-----:  | :----:  | :----:  | :----:  | \n|  0   |  0  |  0  |  0  |  0  |\n|  1   |  0  |  0  |  1  |  1  |\n|  0   |  1  |  0  |  1  |  1  |\n|  1   |  1  |  1  |  1  |  0  |\n\n## Bit Masking\n***\n\n#### Hide bit values:\n\n1. num OR with 1 --> num will always be 1\n\n2. num AND with 0 --> num will always be 0\n\n<u><strong>Some useful bitwise operations with examples:</strong></u>\n\n 1. <em>Multiply</em> a number by 2 --> <strong>Left shift the number by 1</strong>:\n\n $$\n   \texp: 5\\ (00000101)\\ --> 10\\ (00001010) \n $$\n\n 2. Divide a number by 2 --> <strong>Right shift the number by 1</strong>:\n $$ $$\n\n 3. Powers of 2 --> <strong>Right shift 1 by (exponent)</strong>:\n\n $$\n  \texp: 4 = 1 \\times 2 \\times 2 = 2^2,\\ 8 = 1 \\times 2 \\times 2 \\times 2 = 2^3\n $$\n\n 4. Check if number is power of 2 --> $\\textbf{(n&(n-1) == 0)}$:\n\n $$16\\ (00010000) \\\\\\ 15\\ (00001111)$$\n\n 5. Decimal to binary --> <strong>Loop and number&1<strong>:\n \n Right shift the decimal number by 1 each time (first time do AND first) and AND that with 1, record it down. Print all the recorded digits in reversed order to get the binary representation of the decimal number.\n\n 6. Check even/odd numbers --> <strong>number AND with 1</strong>:\n\n\t ~~~python\n\t if n&1 == 0:\n\t     n is EVEN\n\t else:\n\t     n is ODD\n\t ~~~\n &#13;\n\n 7. Check $x_{th}$ bit from right in number n --> <storng>AND with 1 shifted to the left by $x$ bits</strong>\n\n \t~~~python\n \tif n&(1<<x-1) == 0:\n \t    RESET\n \telse:\n \t    SET\n \t~~~\n Arithmetic operators have higher priority than bitwise operator. $x-1$ will be evaluated before $>>$.\n\n 8. Set the $x_th$ bit in the number --> <strong>OR with 1 shifted to $x_th$ bit</strong>:\n \n \t~~~python\n \tn = n | (1<<x-1)\n \t~~~\n &#13;\n\n 9. Toggle the $x_th$ bit in the number --> <strong>XOR with 1 shifted to $x_th$ bit</strong>\n\n \t~~~python\n \tn = n ^ (1<<x-1)\n \t~~~\n &#13;\n\n 10. Reset the rightmost bit in a number n:\n\n \t~~~python\n \tn = n & (n-1)\n \t~~~\n &#13;\n\n 11. Check the bit-length:\n\n \t~~~python\n \tl = 0\n \twhile n:\n \t    l += 1\n \t    n >>= 1\n \t~~~\n &#13;\n\n 12. Count the number of set bits:\n\n \t~~~python\n \tcnt = 0\n \twhile n:\n \t    cnt += 1\n \t    n &= (n-1)\n \t~~~\n &#13;\n\n## Application\n***\n\nFinally, an example of getting all the subsets/sublists of a set/list using bitwise operation. Here is a simple example:\n\nIn this example, we are trying to get all the sublists of a list  `[0, 1, 2]`, implemeting this in Python:\n    ~~~python\n\tn = 3\n\t[[j for j in range(n) if (i>>j)&1] for i in range(2**n)]\n\t~~~\nThere are three numbers in the original list and each number can only have two states: in or not in the list. Therefore, there should be $2^3 = 8$ sublists of the original list. Let me further illustrate this idea with a table, each table cell value is the result of `(row>>col)&1`:\n\n|  >>  |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |\n| --------   | :-----:  | :----:  | :----:  | :----:  | :----:  | :----:  | :----:  | :----:  |  \n|  0   |  0  |  0  |  1  |  1  |  0  |  1  |  0  |  1  |\n|  1   |  0  |  1  |  0  |  1  |  0  |  0  |  1  |  1  |\n|  2   |  0  |  0  |  0  |  0  |  1  |  1  |  1  |  1  |\n\n\n\n","source":"_posts/Play-with-Bitwise-Operations.md","raw":"---\ntitle: Play with Bitwise Operations\ndate: 2017-06-29 01:03:04\ntags:\n---\n\n\nI want to write a quick summary (with examples) of some bitwise operations I have learnt from another article [(Reference here)](https://www.hackerearth.com/practice/notes/fun-with-bits-print-all-subsets-of-a-set/). I have included some common use of these bitwise operations and put together some examples to illustrate these ideas. Finally, I have presented an application of some of the bitwise operations here. This post is mostly for my own record of studying. I hope you will enjoy the contents here too! Have fun and keep coding!\n\n<!-- more -->\n## Bitwise Logic\n***\n|  x   |  y  |  AND  |  OR  |  XOR |\n| --------   | :-----:  | :----:  | :----:  | :----:  | \n|  0   |  0  |  0  |  0  |  0  |\n|  1   |  0  |  0  |  1  |  1  |\n|  0   |  1  |  0  |  1  |  1  |\n|  1   |  1  |  1  |  1  |  0  |\n\n## Bit Masking\n***\n\n#### Hide bit values:\n\n1. num OR with 1 --> num will always be 1\n\n2. num AND with 0 --> num will always be 0\n\n<u><strong>Some useful bitwise operations with examples:</strong></u>\n\n 1. <em>Multiply</em> a number by 2 --> <strong>Left shift the number by 1</strong>:\n\n $$\n   \texp: 5\\ (00000101)\\ --> 10\\ (00001010) \n $$\n\n 2. Divide a number by 2 --> <strong>Right shift the number by 1</strong>:\n $$ $$\n\n 3. Powers of 2 --> <strong>Right shift 1 by (exponent)</strong>:\n\n $$\n  \texp: 4 = 1 \\times 2 \\times 2 = 2^2,\\ 8 = 1 \\times 2 \\times 2 \\times 2 = 2^3\n $$\n\n 4. Check if number is power of 2 --> $\\textbf{(n&(n-1) == 0)}$:\n\n $$16\\ (00010000) \\\\\\ 15\\ (00001111)$$\n\n 5. Decimal to binary --> <strong>Loop and number&1<strong>:\n \n Right shift the decimal number by 1 each time (first time do AND first) and AND that with 1, record it down. Print all the recorded digits in reversed order to get the binary representation of the decimal number.\n\n 6. Check even/odd numbers --> <strong>number AND with 1</strong>:\n\n\t ~~~python\n\t if n&1 == 0:\n\t     n is EVEN\n\t else:\n\t     n is ODD\n\t ~~~\n &#13;\n\n 7. Check $x_{th}$ bit from right in number n --> <storng>AND with 1 shifted to the left by $x$ bits</strong>\n\n \t~~~python\n \tif n&(1<<x-1) == 0:\n \t    RESET\n \telse:\n \t    SET\n \t~~~\n Arithmetic operators have higher priority than bitwise operator. $x-1$ will be evaluated before $>>$.\n\n 8. Set the $x_th$ bit in the number --> <strong>OR with 1 shifted to $x_th$ bit</strong>:\n \n \t~~~python\n \tn = n | (1<<x-1)\n \t~~~\n &#13;\n\n 9. Toggle the $x_th$ bit in the number --> <strong>XOR with 1 shifted to $x_th$ bit</strong>\n\n \t~~~python\n \tn = n ^ (1<<x-1)\n \t~~~\n &#13;\n\n 10. Reset the rightmost bit in a number n:\n\n \t~~~python\n \tn = n & (n-1)\n \t~~~\n &#13;\n\n 11. Check the bit-length:\n\n \t~~~python\n \tl = 0\n \twhile n:\n \t    l += 1\n \t    n >>= 1\n \t~~~\n &#13;\n\n 12. Count the number of set bits:\n\n \t~~~python\n \tcnt = 0\n \twhile n:\n \t    cnt += 1\n \t    n &= (n-1)\n \t~~~\n &#13;\n\n## Application\n***\n\nFinally, an example of getting all the subsets/sublists of a set/list using bitwise operation. Here is a simple example:\n\nIn this example, we are trying to get all the sublists of a list  `[0, 1, 2]`, implemeting this in Python:\n    ~~~python\n\tn = 3\n\t[[j for j in range(n) if (i>>j)&1] for i in range(2**n)]\n\t~~~\nThere are three numbers in the original list and each number can only have two states: in or not in the list. Therefore, there should be $2^3 = 8$ sublists of the original list. Let me further illustrate this idea with a table, each table cell value is the result of `(row>>col)&1`:\n\n|  >>  |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |\n| --------   | :-----:  | :----:  | :----:  | :----:  | :----:  | :----:  | :----:  | :----:  |  \n|  0   |  0  |  0  |  1  |  1  |  0  |  1  |  0  |  1  |\n|  1   |  0  |  1  |  0  |  1  |  0  |  0  |  1  |  1  |\n|  2   |  0  |  0  |  0  |  0  |  1  |  1  |  1  |  1  |\n\n\n\n","slug":"Play-with-Bitwise-Operations","published":1,"updated":"2017-06-29T07:03:04.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i33ecd00019rrcwg7fv3hr","content":"<p>I want to write a quick summary (with examples) of some bitwise operations I have learnt from another article <a href=\"https://www.hackerearth.com/practice/notes/fun-with-bits-print-all-subsets-of-a-set/\" target=\"_blank\" rel=\"external\">(Reference here)</a>. I have included some common use of these bitwise operations and put together some examples to illustrate these ideas. Finally, I have presented an application of some of the bitwise operations here. This post is mostly for my own record of studying. I hope you will enjoy the contents here too! Have fun and keep coding!</p>\n<a id=\"more\"></a>\n<h2 id=\"Bitwise-Logic\"><a href=\"#Bitwise-Logic\" class=\"headerlink\" title=\"Bitwise Logic\"></a>Bitwise Logic</h2><hr>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th style=\"text-align:center\">y</th>\n<th style=\"text-align:center\">AND</th>\n<th style=\"text-align:center\">OR</th>\n<th style=\"text-align:center\">XOR</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td>1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td>0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td>1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Bit-Masking\"><a href=\"#Bit-Masking\" class=\"headerlink\" title=\"Bit Masking\"></a>Bit Masking</h2><hr>\n<h4 id=\"Hide-bit-values\"><a href=\"#Hide-bit-values\" class=\"headerlink\" title=\"Hide bit values:\"></a>Hide bit values:</h4><ol>\n<li><p>num OR with 1 –&gt; num will always be 1</p>\n</li>\n<li><p>num AND with 0 –&gt; num will always be 0</p>\n</li>\n</ol>\n<p><u><strong>Some useful bitwise operations with examples:</strong></u></p>\n<ol>\n<li><p><em>Multiply</em> a number by 2 –&gt; <strong>Left shift the number by 1</strong>:</p>\n<p>$$<br>   exp: 5\\ (00000101)\\ –&gt; 10\\ (00001010)<br>$$</p>\n</li>\n<li><p>Divide a number by 2 –&gt; <strong>Right shift the number by 1</strong>:<br>$$ $$</p>\n</li>\n<li><p>Powers of 2 –&gt; <strong>Right shift 1 by (exponent)</strong>:</p>\n<p>$$<br>  exp: 4 = 1 \\times 2 \\times 2 = 2^2,\\ 8 = 1 \\times 2 \\times 2 \\times 2 = 2^3<br>$$</p>\n</li>\n<li><p>Check if number is power of 2 –&gt; $\\textbf{(n&amp;(n-1) == 0)}$:</p>\n<p>$$16\\ (00010000) \\\\ 15\\ (00001111)$$</p>\n</li>\n<li><p>Decimal to binary –&gt; <strong>Loop and number&amp;1<strong>:</strong></strong></p>\n<p>Right shift the decimal number by 1 each time (first time do AND first) and AND that with 1, record it down. Print all the recorded digits in reversed order to get the binary representation of the decimal number.</p>\n</li>\n<li><p>Check even/odd numbers –&gt; <strong>number AND with 1</strong>:</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> n&amp;<span class=\"number\">1</span> == <span class=\"number\">0</span>:</div><div class=\"line\">    n <span class=\"keyword\">is</span> EVEN</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    n <span class=\"keyword\">is</span> ODD</div></pre></td></tr></table></figure>\n<p>&#13;</p>\n</li>\n<li><p>Check $x_{th}$ bit from right in number n –&gt; <storng>AND with 1 shifted to the left by $x$ bits</storng></p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> n&amp;(<span class=\"number\">1</span>&lt;&lt;x<span class=\"number\">-1</span>) == <span class=\"number\">0</span>:</div><div class=\"line\">    RESET</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    SET</div></pre></td></tr></table></figure>\n<p>Arithmetic operators have higher priority than bitwise operator. $x-1$ will be evaluated before $&gt;&gt;$.</p>\n</li>\n<li><p>Set the $x_th$ bit in the number –&gt; <strong>OR with 1 shifted to $x_th$ bit</strong>:</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">n = n | (<span class=\"number\">1</span>&lt;&lt;x<span class=\"number\">-1</span>)</div></pre></td></tr></table></figure>\n<p>&#13;</p>\n</li>\n<li><p>Toggle the $x_th$ bit in the number –&gt; <strong>XOR with 1 shifted to $x_th$ bit</strong></p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">n = n ^ (<span class=\"number\">1</span>&lt;&lt;x<span class=\"number\">-1</span>)</div></pre></td></tr></table></figure>\n<p>&#13;</p>\n</li>\n<li><p>Reset the rightmost bit in a number n:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">n = n &amp; (n<span class=\"number\">-1</span>)</div></pre></td></tr></table></figure>\n<p>&#13;</p>\n</li>\n<li><p>Check the bit-length:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">l = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">while</span> n:</div><div class=\"line\">    l += <span class=\"number\">1</span></div><div class=\"line\">    n &gt;&gt;= <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>&#13;</p>\n</li>\n<li><p>Count the number of set bits:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cnt = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">while</span> n:</div><div class=\"line\">    cnt += <span class=\"number\">1</span></div><div class=\"line\">    n &amp;= (n<span class=\"number\">-1</span>)</div></pre></td></tr></table></figure>\n<p>&#13;</p>\n</li>\n</ol>\n<h2 id=\"Application\"><a href=\"#Application\" class=\"headerlink\" title=\"Application\"></a>Application</h2><hr>\n<p>Finally, an example of getting all the subsets/sublists of a set/list using bitwise operation. Here is a simple example:</p>\n<p>In this example, we are trying to get all the sublists of a list  <code>[0, 1, 2]</code>, implemeting this in Python:<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">n = <span class=\"number\">3</span></div><div class=\"line\">[[j <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n) <span class=\"keyword\">if</span> (i&gt;&gt;j)&amp;<span class=\"number\">1</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>**n)]</div></pre></td></tr></table></figure></p>\n<p>There are three numbers in the original list and each number can only have two states: in or not in the list. Therefore, there should be $2^3 = 8$ sublists of the original list. Let me further illustrate this idea with a table, each table cell value is the result of <code>(row&gt;&gt;col)&amp;1</code>:</p>\n<table>\n<thead>\n<tr>\n<th>&gt;&gt;</th>\n<th style=\"text-align:center\">0</th>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n<th style=\"text-align:center\">5</th>\n<th style=\"text-align:center\">6</th>\n<th style=\"text-align:center\">7</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td>1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td>2</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"<p>I want to write a quick summary (with examples) of some bitwise operations I have learnt from another article <a href=\"https://www.hackerearth.com/practice/notes/fun-with-bits-print-all-subsets-of-a-set/\">(Reference here)</a>. I have included some common use of these bitwise operations and put together some examples to illustrate these ideas. Finally, I have presented an application of some of the bitwise operations here. This post is mostly for my own record of studying. I hope you will enjoy the contents here too! Have fun and keep coding!</p>","more":"<h2 id=\"Bitwise-Logic\"><a href=\"#Bitwise-Logic\" class=\"headerlink\" title=\"Bitwise Logic\"></a>Bitwise Logic</h2><hr>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th style=\"text-align:center\">y</th>\n<th style=\"text-align:center\">AND</th>\n<th style=\"text-align:center\">OR</th>\n<th style=\"text-align:center\">XOR</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td>1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td>0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td>1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Bit-Masking\"><a href=\"#Bit-Masking\" class=\"headerlink\" title=\"Bit Masking\"></a>Bit Masking</h2><hr>\n<h4 id=\"Hide-bit-values\"><a href=\"#Hide-bit-values\" class=\"headerlink\" title=\"Hide bit values:\"></a>Hide bit values:</h4><ol>\n<li><p>num OR with 1 –&gt; num will always be 1</p>\n</li>\n<li><p>num AND with 0 –&gt; num will always be 0</p>\n</li>\n</ol>\n<p><u><strong>Some useful bitwise operations with examples:</strong></u></p>\n<ol>\n<li><p><em>Multiply</em> a number by 2 –&gt; <strong>Left shift the number by 1</strong>:</p>\n<p>$$<br>   exp: 5\\ (00000101)\\ –&gt; 10\\ (00001010)<br>$$</p>\n</li>\n<li><p>Divide a number by 2 –&gt; <strong>Right shift the number by 1</strong>:<br>$$ $$</p>\n</li>\n<li><p>Powers of 2 –&gt; <strong>Right shift 1 by (exponent)</strong>:</p>\n<p>$$<br>  exp: 4 = 1 \\times 2 \\times 2 = 2^2,\\ 8 = 1 \\times 2 \\times 2 \\times 2 = 2^3<br>$$</p>\n</li>\n<li><p>Check if number is power of 2 –&gt; $\\textbf{(n&amp;(n-1) == 0)}$:</p>\n<p>$$16\\ (00010000) \\\\ 15\\ (00001111)$$</p>\n</li>\n<li><p>Decimal to binary –&gt; <strong>Loop and number&amp;1<strong>:</p>\n<p>Right shift the decimal number by 1 each time (first time do AND first) and AND that with 1, record it down. Print all the recorded digits in reversed order to get the binary representation of the decimal number.</p>\n</li>\n<li><p>Check even/odd numbers –&gt; <strong>number AND with 1</strong>:</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> n&amp;<span class=\"number\">1</span> == <span class=\"number\">0</span>:</div><div class=\"line\">    n <span class=\"keyword\">is</span> EVEN</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    n <span class=\"keyword\">is</span> ODD</div></pre></td></tr></table></figure>\n<p>&#13;</p>\n</li>\n<li><p>Check $x_{th}$ bit from right in number n –&gt; <storng>AND with 1 shifted to the left by $x$ bits</strong></p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> n&amp;(<span class=\"number\">1</span>&lt;&lt;x<span class=\"number\">-1</span>) == <span class=\"number\">0</span>:</div><div class=\"line\">    RESET</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    SET</div></pre></td></tr></table></figure>\n<p>Arithmetic operators have higher priority than bitwise operator. $x-1$ will be evaluated before $&gt;&gt;$.</p>\n</li>\n<li><p>Set the $x_th$ bit in the number –&gt; <strong>OR with 1 shifted to $x_th$ bit</strong>:</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">n = n | (<span class=\"number\">1</span>&lt;&lt;x<span class=\"number\">-1</span>)</div></pre></td></tr></table></figure>\n<p>&#13;</p>\n</li>\n<li><p>Toggle the $x_th$ bit in the number –&gt; <strong>XOR with 1 shifted to $x_th$ bit</strong></p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">n = n ^ (<span class=\"number\">1</span>&lt;&lt;x<span class=\"number\">-1</span>)</div></pre></td></tr></table></figure>\n<p>&#13;</p>\n</li>\n<li><p>Reset the rightmost bit in a number n:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">n = n &amp; (n<span class=\"number\">-1</span>)</div></pre></td></tr></table></figure>\n<p>&#13;</p>\n</li>\n<li><p>Check the bit-length:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">l = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">while</span> n:</div><div class=\"line\">    l += <span class=\"number\">1</span></div><div class=\"line\">    n &gt;&gt;= <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>&#13;</p>\n</li>\n<li><p>Count the number of set bits:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cnt = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">while</span> n:</div><div class=\"line\">    cnt += <span class=\"number\">1</span></div><div class=\"line\">    n &amp;= (n<span class=\"number\">-1</span>)</div></pre></td></tr></table></figure>\n<p>&#13;</p>\n</li>\n</ol>\n<h2 id=\"Application\"><a href=\"#Application\" class=\"headerlink\" title=\"Application\"></a>Application</h2><hr>\n<p>Finally, an example of getting all the subsets/sublists of a set/list using bitwise operation. Here is a simple example:</p>\n<p>In this example, we are trying to get all the sublists of a list  <code>[0, 1, 2]</code>, implemeting this in Python:<br>    <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">n = <span class=\"number\">3</span></div><div class=\"line\">[[j <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n) <span class=\"keyword\">if</span> (i&gt;&gt;j)&amp;<span class=\"number\">1</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>**n)]</div></pre></td></tr></table></figure></p>\n<p>There are three numbers in the original list and each number can only have two states: in or not in the list. Therefore, there should be $2^3 = 8$ sublists of the original list. Let me further illustrate this idea with a table, each table cell value is the result of <code>(row&gt;&gt;col)&amp;1</code>:</p>\n<table>\n<thead>\n<tr>\n<th>&gt;&gt;</th>\n<th style=\"text-align:center\">0</th>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n<th style=\"text-align:center\">5</th>\n<th style=\"text-align:center\">6</th>\n<th style=\"text-align:center\">7</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td>1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td>2</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n</tbody>\n</table>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}